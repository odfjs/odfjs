import test from 'ava';
import {join} from 'node:path';

import {getOdtTemplate} from '../../scripts/odf/odtTemplate-forNode.js'

import {fillOdtTemplate, getOdtTextContent} from '../../exports.js'


test.skip('basic template filling with {#each}', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/enum-courses.odt')
    const templateContent = `üß∫ La liste de courses incroyable üß∫

{#each listeCourses as √©l√©ment}
{√©l√©ment}
{/each}
`

	const data = {
        listeCourses : [
            'Radis',
            `Jus d'orange`,
            'P√¢tes √† lasagne (fra√Æches !)'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)

    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')
try{
    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `üß∫ La liste de courses incroyable üß∫

Radis
Jus d'orange
P√¢tes √† lasagne (fra√Æches !)
`)
    }catch(e){console.error(e); throw e}


});


test.skip('Filling with {#each} and non-iterable value results in no error and empty result', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/enum-courses.odt')
    const templateContent = `üß∫ La liste de courses incroyable üß∫

{#each listeCourses as √©l√©ment}
{√©l√©ment}
{/each}
`

	const data = {
        listeCourses : undefined
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)

    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `üß∫ La liste de courses incroyable üß∫

`)


});


test.skip('template filling with {#each} generating a list', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/liste-courses.odt')
    const templateContent = `üß∫ La liste de courses incroyable üß∫

- {#each listeCourses as √©l√©ment}
- {√©l√©ment}
- {/each}
`

	const data = {
        listeCourses : [
            'Radis',
            `Jus d'orange`,
            'P√¢tes √† lasagne (fra√Æches !)'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)

    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `üß∫ La liste de courses incroyable üß∫

- Radis
- Jus d'orange
- P√¢tes √† lasagne (fra√Æches !)
`)


});


test.skip('template filling with 2 sequential {#each}', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/liste-fruits-et-l√©gumes.odt')
    const templateContent = `Liste de fruits et l√©gumes

Fruits
{#each fruits as fruit}
{fruit}
{/each}

L√©gumes
{#each l√©gumes as l√©gume}
{l√©gume}
{/each}
`

	const data = {
        fruits : [
            'Past√®que üçâ',
            `Kiwi ü•ù`,
            'Banane üçå'
        ],
        l√©gumes: [
            'Champignon üçÑ‚Äçüü´',
            'Avocat ü•ë',
            'Poivron ü´ë'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)    
    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `Liste de fruits et l√©gumes

Fruits
Past√®que üçâ
Kiwi ü•ù
Banane üçå

L√©gumes
Champignon üçÑ‚Äçüü´
Avocat ü•ë
Poivron ü´ë
`)

});


test.skip('template filling with nested {#each}s', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/l√©gumes-de-saison.odt')
    const templateContent = `L√©gumes de saison

{#each l√©gumesSaison as saisonL√©gumes}
{saisonL√©gumes.saison}
- {#each saisonL√©gumes.l√©gumes as l√©gume}
- {l√©gume}
- {/each}

{/each}
`

	const data = {
        l√©gumesSaison : [
            {
                saison: 'Printemps',
                l√©gumes: [
                    'Asperge',
                    'Betterave',
                    'Blette'
                ]
            },
            {
                saison: '√ât√©',
                l√©gumes: [
                    'Courgette',
                    'Poivron',
                    'Laitue'
                ]
            },
            {
                saison: 'Automne',
                l√©gumes: [
                    'Poireau',
                    'Potiron',
                    'Brocoli'
                ]
            },
            {
                saison: 'Hiver',
                l√©gumes: [
                    'Radis',
                    'Chou de Bruxelles',
                    'Fris√©e'
                ]
            }
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)    
    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `L√©gumes de saison

Printemps
- Asperge
- Betterave
- Blette

√ât√©
- Courgette
- Poivron
- Laitue

Automne
- Poireau
- Potiron
- Brocoli

Hiver
- Radis
- Chou de Bruxelles
- Fris√©e

`)

});


test.skip('template filling with text after {/each} in same text node', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/text-after-closing-each.odt')
    const templateContent = `L√©gumes de saison

{#each l√©gumes as l√©gume}
{l√©gume}, 
{/each} en {saison}
`

	const data = {
        saison: 'Printemps',
        l√©gumes: [
            'Asperge',
            'Betterave',
            'Blette'
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)    
    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, `L√©gumes de saison

Asperge, 
Betterave, 
Blette, 
 en Printemps
`)

});


test.skip('template filling of a table', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/tableau-simple.odt')
    const templateContent = `√âvolution √©nergie en kWh par personne en France

Ann√©e
√ânergie par personne
{#each ann√©eConsos as ann√©eConso}

{ann√©eConso.ann√©e}
{ann√©eConso.conso}
{/each}
`

    /*
    Data sources:

    U.S. Energy Information Administration (2023)Energy Institute - 
    Statistical Review of World Energy (2024)Population based on various sources (2023)

    ‚Äì with major processing by Our World in Data
    */
	const data = {
        ann√©eConsos : [
            { ann√©e: 1970, conso: 36252.637},
            { ann√©e: 1980, conso: 43328.78},
            { ann√©e: 1990, conso: 46971.94},
            { ann√©e: 2000, conso: 53147.277},
            { ann√©e: 2010, conso: 48062.32},
            { ann√©e: 2020, conso: 37859.246},
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)    
    t.deepEqual(templateTextContent.trim(), templateContent.trim(), 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent.trim(), `√âvolution √©nergie en kWh par personne en France

Ann√©e
√ânergie par personne
1970
36252.637
1980
43328.78
1990
46971.94
2000
53147.277
2010
48062.32
2020
37859.246
`.trim())

});


test('Mysterious {#each} bug', async t => {
    const templatePath = join(import.meta.dirname, '../fixtures/minimal-testcase-audrey.odt')
    const templateContent = `{#each liste_esp√®ces_par_impact as √©l√©ment}
{#each √©l√©ment.liste_esp√®ces as esp√®ce}
{/each}
{/each}
`

	const data = {
        liste_esp√®ces_par_impact: [
            {}
        ]
    }

    const odtTemplate = await getOdtTemplate(templatePath)

    const templateTextContent = await getOdtTextContent(odtTemplate)

    t.deepEqual(templateTextContent, templateContent, 'reconnaissance du template')

    const odtResult = await fillOdtTemplate(odtTemplate, data)

    const odtResultTextContent = await getOdtTextContent(odtResult)
    t.deepEqual(odtResultTextContent, ``)


});